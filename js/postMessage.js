// Generated by CoffeeScript 1.4.0

(function() {
  var PostMsg;
  if (!!!window.postMessage) {
    return;
  }
  PostMsg = (function() {

    function PostMsg(domain, child, interval) {
      var m;
      if (interval == null) {
        interval = 5000;
      }
      m = this;
      m.callbacks = {};
      m.interval = interval;
      m.domain = domain;
      m.child = child;
      m.events = [];
      m.sendQ = [];
      m.fns = [];
      m.receive();
      m.init();
      return;
    }

    /*
        Listen on the given `event` with `fn`.
        @param {String} event
        @param {Function} fn
    */


    PostMsg.prototype.on = function(event, fn) {
      var m;
      m = this;
      fn.id = m.makeId();
      fn = $.extend(fn, m);
      (m.callbacks[event] = m.callbacks[event] || []).push(fn);
      return m;
    };

    /*
        Deregister event handler
        @param {String} event - event name
        @param {String} id - The ID to search for. If undefined, will empty all
        callbacks associated with the event name
    */


    PostMsg.prototype.off = function(event, id) {
      var callbacks, i, len;
      id = id || this.id;
      if (!id) {
        return this.callbacks[event] = [];
      }
      callbacks = this.callbacks[event];
      if (callbacks) {
        len = callbacks.length;
        i = 0;
        while (i < len) {
          if (callbacks[i].id === id) {
            return callbacks.splice(i, 1);
          }
          i++;
        }
      }
      return this;
    };

    /*
        Bind an event to fire once.
        @param {String} event name
        @param {Function} Callback to execute when binding fires
        @return {Class} Instance
    */


    PostMsg.prototype.once = function(event, fn) {
      var callback;
      fn.once = true;
      callback = this.on(event, fn);
      return this;
    };

    /*
        Emit `event` with the given args.
        @param {String} event
        @param {Mixed} ...
    */


    PostMsg.prototype.emit = function(event) {
      var args, callbacks, cb, clear, evtArgs, i, len;
      args = Array.prototype.slice.call(arguments, 1);
      callbacks = this.callbacks[event];
      if (callbacks) {
        clear = [];
        len = callbacks.length;
        i = 0;
        while (i < len) {
          cb = callbacks[i];
          evtArgs = [cb.id];
          cb.apply(cb, args.concat(evtArgs));
          if (cb.once === true) {
            callbacks.splice(i, 1);
            i--;
            len--;
          }
          ++i;
        }
      }
      return this;
    };

    PostMsg.prototype.init = function() {
      var m;
      m = this;
      setInterval(function() {
        return m.digest();
      }, m.interval);
    };

    /*
        Internal digest method.
        Runs through all bound fns and processes the send queue
    */


    PostMsg.prototype.digest = function() {
      var args, fn, i, len, m, _i, _len, _ref;
      m = this;
      _ref = m.fns;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fn = _ref[_i];
        fn.apply(fn, arguments);
      }
      len = m.sendQ.length;
      i = 0;
      while (i < len) {
        args = m.sendQ[0];
        m.__send.apply(m, args);
        m.sendQ.shift();
        i++;
      }
    };

    /*
        Bind a function to the interval loop
        @fn {Function} Requires a callback function
    */


    PostMsg.prototype.bind = function(fn) {
      var m;
      m = this;
      if (typeof fn !== 'function') {
        throw new TypeError("Parameter should be a function.");
      } else {
        $.extend(fn, m);
        fn.firstCall = true;
        fn.PostMsg = m;
        fn.id = m.makeId();
        fn.data = [];
        m.fns.push(fn);
      }
    };

    /*
        Unbind a function by ID
        @param {String} id - The function ID. Can be undefined if called from
        within the function that is to be unbound. (e.g. - within a bind callback)
        @return {void}
    */


    PostMsg.prototype.unbind = function(id) {
      var i, len, m;
      m = this;
      id = id || m.id;
      if (!id) {
        return;
      }
      len = m.fns.length;
      i = 0;
      while (i < len) {
        if (m.fns[i].id === id) {
          return m.fns.splice(i, 1);
        }
        i++;
      }
    };

    /*
        Send a post message response
        @param {Window} Window source to send post message to
        @param {String} Stringified object to send
        @return {void}
    */


    PostMsg.prototype.__send = function(tgt, data) {
      var m, obj;
      m = this;
      if ((tgt != null) && typeof data === 'string') {
        tgt.postMessage(data, m.domain);
        obj = {
          postmsg: m,
          data: data,
          tgt: tgt
        };
        m.emit("send", obj);
      }
    };

    /*
        Public send method
        @param {Window} tgt - Target window to send to
        @param {String, Object} data - String or object to send
        @return {void}
    */


    PostMsg.prototype.send = function(tgt, data) {
      var m;
      m = this;
      if (m.child) {
        data = tgt;
        tgt = window.parent;
      }
      data = $.type(data) === 'object' ? JSON.stringify(data) : data;
      m.sendQ.push([tgt, data]);
    };

    /*
        Internal `receive` method. Simply registers receive event.
    */


    PostMsg.prototype.receive = function() {
      var m;
      m = this;
      $(window).on('message', function(e) {
        var data, evt;
        evt = e.originalEvent;
        if (evt.origin !== m.domain) {
          return;
        }
        data = JSON.parse(evt.data);
        data.postmsg = m;
        data._source = evt.source;
        data._event = e;
        m.emit("receive", data);
      });
    };

    PostMsg.prototype.makeId = function() {
      var chars, i, id, len, rNum;
      id = "_data-";
      chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz-";
      len = 18;
      i = 0;
      while (i < len) {
        rNum = Math.floor(Math.random() * chars.length);
        id += chars.substring(rNum, rNum + 1);
        i++;
      }
      return id;
    };

    return PostMsg;

  })();
  return window.PostMsg = PostMsg;
})();
